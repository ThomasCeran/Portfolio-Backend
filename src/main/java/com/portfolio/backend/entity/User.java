package com.portfolio.backend.entity;

import java.time.LocalDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;

/**
 * Represents a user in the application.
 * This entity is mapped to the "app_user" table in the database.
 */
@Entity
@Table(name = "app_user") // Specifies the table name in the database.
public class User {

    /**
     * Unique identifier for the user.
     * Automatically generated by the database using the IDENTITY strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Username of the user.
     * Used for identifying the user in the application.
     */
    private String username;

    /**
     * Email address of the user.
     * Can be used for authentication or communication purposes.
     */
    @Email(message = "Invalid email")
    private String email;

    /**
     * Password of the user.
     * Should be securely stored (e.g., hashed) in the database.
     */
    private String password;

    /**
     * Role associated with the user.
     * Many-to-One relationship: each user is linked to a single role.
     * The "role_id" foreign key is used for this relationship.
     */
    @ManyToOne
    @JoinColumn(name = "role_id", nullable = false) // Defines the foreign key column in the database.
    private Role role;

    /**
     * The timestamp when the user was created.
     * This field is mandatory and cannot be updated after creation.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    /**
     * The timestamp when the user was last updated.
     * This field is updated whenever the user information changes.
     */
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    /**
     * List of contact messages associated with the user.
     * One-to-Many relationship: a user can have multiple contact messages.
     */
    // @OneToMany(mappedBy = "user") // Indicates the inverse side of the
    // relationship with "user" in ContactMessage.
    // private List<ContactMessage> contactMessages;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    // public List<ContactMessage> getContactMessages() {
    // return contactMessages;
    // }

    // public void setContactMessages(List<ContactMessage> contactMessages) {
    // this.contactMessages = contactMessages;
    // }

}
