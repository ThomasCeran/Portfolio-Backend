# Nom de l'application (affiché dans les logs et utilisé pour identifier cette application Spring)
spring.application.name=portfolio-backend

# --- Configuration de la base de données ---

# URL JDBC pour se connecter à votre base de données PostgreSQL locale
spring.datasource.url=jdbc:postgresql://localhost:5432/portfolio

# Nom d'utilisateur de la base de données (doit avoir les permissions nécessaires sur le schéma)
spring.datasource.username=portfolio_user

# Mot de passe de l'utilisateur de la base de données
spring.datasource.password=password123

# Driver JDBC utilisé pour PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# --- Configuration Hibernate / JPA ---

# Définit le comportement pour la création et la mise à jour des tables
# "update" : Met à jour les tables existantes en fonction des entités JPA
# (autres options possibles : create-drop, validate, none, etc.)
spring.jpa.hibernate.ddl-auto=update

# Détermine le dialecte SQL utilisé par Hibernate (adapté à PostgreSQL ici)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Affiche les requêtes SQL générées par Hibernate dans les logs (utile pour le développement)
spring.jpa.show-sql=true

# Formate les requêtes SQL pour les rendre plus lisibles dans les logs
spring.jpa.properties.hibernate.format_sql=true

# Désactive la fonctionnalité "Open EntityManager in View", qui est utile
# pour éviter les problèmes de LazyInitializationException dans les requêtes longues
spring.jpa.open-in-view=false
