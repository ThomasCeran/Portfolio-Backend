# --- Application Information ---
# Name of the application (displayed in logs and used to identify this Spring application)
spring.application.name=portfolio-backend

# --- Database Configuration (PostgreSQL) ---

# JDBC URL to connect to the local PostgreSQL database
spring.datasource.url=jdbc:postgresql://localhost:5432/portfolio

# Database username (must have appropriate permissions on the schema)
spring.datasource.username=portfolio_user

# Password for the database user
spring.datasource.password=password123

# JDBC driver for PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# --- Hibernate / JPA Configuration ---

# Specifies how Hibernate should handle schema updates:
# - update: Updates existing tables to match JPA entities (good for development).
# - create-drop: Creates tables on startup and drops them on shutdown.
# - validate: Validates that tables match JPA entities without modifying them.
# - none: Disables schema management.
spring.jpa.hibernate.ddl-auto=update

# Defines the SQL dialect used by Hibernate (PostgreSQL-specific here)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Enables logging of SQL queries generated by Hibernate (useful for debugging)
spring.jpa.show-sql=true

# Formats SQL queries in logs to make them easier to read
spring.jpa.properties.hibernate.format_sql=true

# Disables "Open EntityManager in View" to avoid LazyInitializationException
# This ensures that the persistence context is closed once the transaction is complete.
spring.jpa.open-in-view=false

# Secret key for signing JWT tokens (change this for production)
jwt.secret=ma-cle-secrete-tres-longue-pour-le-hmac

# Token expiration time in milliseconds (24 hour here)
jwt.expiration=86400000 
